{"hash":"6f8645169d279f663a1c1d42aeb51a3796a04f5e","data":{"post":{"title":"RNode explore-deploy bash script using jq","date":"14. September 2020","timeToRead":1,"content":"<p>You can run read only contracts on rchain without paying any fee using the http explore-deploy api call. Every returned value from an explore-deploy is enclosed in a structure having a type and data field. Pulling out just the data as json is often needed to use the complete result in json without enclosing type and data constructs. This example uses the bash json utilityy jq to 'detype' the output. While jq is good for many uses of json in bash using javascript might have been as easy in this case.</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">#usage: ./explore.sh URI\nuri=${1-\"rho:id:ar17ohqq83kx7a16nbfquwu9gxidduk9hstgbs9gkbj63o8gqyh1ye\"}\ncurl -s -X POST https://observer.testnet.rchain.coop/api/explore-deploy -d '\nnew return,\n  lookup(`rho:registry:lookup`)\nin {\n  new valueCh in {\n    // Fill in registry URI: `rho:id:11fhnau8j3...h4459w9bpus6oi`\n    lookup!(\n`'\"$uri\"'`\n      , *valueCh) |\n    for (@value <- valueCh) {\n      return!(value)\n    }\n  }\n}\n'|tee /tmp/explore.err|jq '.expr[]|\ndef detype:\n  if type == \"object\"\n  then if has(\"ExprTuple\") then .ExprTuple.data | map(detype)\n       elif has(\"ExprList\") then .ExprList.data | map(detype)\n       elif has(\"ExprMap\") then .ExprMap.data | detype\n       elif has(\"ExprString\") then .ExprString.data\n       else . end\n  else . end;\ndef walk(f): # walk def is needed for old jq <1.5\n  . as $in\n  | if type == \"object\" then\n      reduce keys[] as $key\n        ( {}; . + { ($key):  ($in[$key] | walk(f)) } ) | f\n  elif type == \"array\" then map( walk(f) ) | f\n  else f\n  end;\nwalk(detype)' || cat /tmp/explore.err\nexit</code></pre>\n","author":[],"excerpt":"explore-deploy bash script using jq"}},"context":{}}