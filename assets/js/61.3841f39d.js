(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{281:function(t,e,a){"use strict";e.a={name:"VueRemarkRoot",render:function(t){return t("div",null,this.$slots.default)}}},746:function(t,e,a){"use strict";a.r(e);var r=a(0),n=a(54),o=(a(88),a(20),a(34),a(281)),s=a(1),i=(s.a.config.optionMergeStrategies,{VueRemarkRoot:o.a}),u=function(t){var e=t.options.components=t.options.components||{},a=t.options.computed=t.options.computed||{};Object.keys(i).forEach((function(t){"object"===Object(n.a)(i[t])&&"function"==typeof i[t].render?e[t]=i[t]:a[t]=function(){return i[t]}}))},c=s.a.config.optionMergeStrategies,l="__vueRemarkFrontMatter",p={excerpt:null,title:"Recursion"};var h=function(t){t.options[l]&&(t.options[l]=p),s.a.util.defineReactive(t.options,l,p),t.options.computed=c.computed({$frontmatter:function(){return t.options[l]}},t.options.computed)},d=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("VueRemarkRoot",[a("h2",{attrs:{id:"recursion"}},[a("a",{attrs:{href:"#recursion","aria-hidden":"true"}},[t._v("#")]),t._v("Recursion")]),a("p",[t._v("Many programming languages use iteration as a fundamental way of controlling the flow of their programs. Iteration inherently means doing a process to one item then the next then the next. Because rholang is a fully concurrent programming language this is impossible. But that's actually a strength!")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",{pre:!0,attrs:{class:"language-text"}},[t._v("manually iterate through the list [1, 2, 3, 4]")])]),a("p",[t._v("This process is clearly not sustainable because long lists would be extremely deeply nested. Worse, any code that we actually write would have a maximum depth. And we don't want to limit the length of our list. Consider this crafty code")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",{pre:!0,attrs:{class:"language-text"}},[t._v("Simple recursion that passes a counter and compares it to the lists length")])]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",{pre:!0,attrs:{class:"language-text"}},[t._v("Better version that uses pattern matching to detect empty list")])]),a("h2",{attrs:{id:"recursion-operators"}},[a("a",{attrs:{href:"#recursion-operators","aria-hidden":"true"}},[t._v("#")]),t._v("Recursion operators")]),a("ul",[a("li",[t._v("map")]),a("li",[t._v("filter")]),a("li",[t._v("sumlist")])]),a("h3",{attrs:{id:"exercise"}},[a("a",{attrs:{href:"#exercise","aria-hidden":"true"}},[t._v("#")]),t._v("Exercise")]),a("p",[t._v("Write a contract that takes in two integers that represent a minimum and a maximum.")]),a("p",[t._v("Exercise: group forwarder. I, the king, send messages to the forwarder who copies them to all the recipients. Rather than just having kill switch, I have the ability to change group subscription.")])])}),[],!1,null,null,null);"function"==typeof u&&u(d),"function"==typeof h&&h(d);e.default=d.exports}}]);